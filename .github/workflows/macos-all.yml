name: "macos-all"

env:
  os: MacOS

on: push

jobs:
  test:
    runs-on: "macos-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Install Python3.10
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Test
        shell: bash --noprofile --norc {0}
        run: |-
          wget -q -O mermaid-electron.dmg 'https://github.com/whinee/mermaid-electron/releases/download/latest/mermaid-electron.dmg'
          MOUNT_OUTPUT=$(hdiutil attach -nobrowse mermaid-electron.dmg)
          VOLUME_NAME=$(echo "$MOUNT_OUTPUT" | grep -o '/Volumes/[^ ]*' | sed -n '1p')
          echo "Mounted DMG with volume name: $VOLUME_NAME"
          cd "$VOLUME_NAME"
          ls
          hdiutil detach "$VOLUME_NAME"
          # ls -R
          # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # brew install --cask osxfuse
          # just --evaluate
          # just bootstrap
          # source "$(just --evaluate pyenv_activate)"
          # chmod +x mermaid-electron.AppImage
          # python all.py
      - name: Delete Release
        shell: bash --noprofile --norc {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_name="${{ env.os }}"
          release_id=$(curl -s -X GET -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases" | jq ".[] | select(.name == \"$release_name\") | .id")
          if [ ! -z "$release_id" ]; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          else
            echo "Release not found."
          fi
      - name: Read Release Message From File
        id: read_release_message
        shell: bash --noprofile --norc {0}
        run: |
          release_message=$(cat results.md)
          echo "::set-output name=message::$release_message"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.os }}
          release_name: ${{ env.os }}
          body: ${{ steps.read_release_message.outputs.message }}
          draft: false
          prerelease: false