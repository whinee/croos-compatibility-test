name: "windows-all"

env:
  os: Windows

on: push

jobs:
  test:
    runs-on: "windows-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Install Python3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install just
        uses: taiki-e/install-action@just
      - name: Test
        shell: pwsh
        run: |-
          # Invoke-WebRequest -OutFile 'mermaid-electron.exe' -Uri 'https://github.com/whinee/mermaid-electron/releases/download/latest/mermaid-electron.exe'
          # attrib +x mermaid-electron.exe
          just --evaluate
          just bootstrap
          # Get-Content "$(just --evaluate pyenv_activate)"
          # python all.py
      - name: Delete Release
        shell: bash --noprofile --norc {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_name="${{ env.os }}"
          release_id=$(curl -s -X GET -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases" | jq ".[] | select(.name == \"$release_name\") | .id")
          if [ ! -z "$release_id" ]; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          else
            echo "Release not found."
          fi
      - name: Read Release Message From File
        id: read_release_message
        shell: bash --noprofile --norc {0}
        run: |
          release_message="$(cat results.md)"
          echo "message=$release_message" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.os }}
          release_name: ${{ env.os }}
          body: ${{ steps.read_release_message.outputs.message }}
          draft: false
          prerelease: false
      - name: Read File and Upload Assets
        shell: bash --noprofile --norc {0}
        run: |
          upload_url=${{ steps.create_release.outputs.upload_url }}
          filenames=$(cat to-be-uploaded.txt)
          for filename in $filenames; do
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: $(file -b --mime-type $filename)" \
              --data-binary @$filename \
              "$upload_url?name=$(basename $filename)"
          done
